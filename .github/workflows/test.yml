name: Twitch UI Automation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget gnupg unzip
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Install ChromeDriver with robust version handling
        CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+')
        echo "Chrome version: $CHROME_VERSION"
        
        # Try new ChromeDriver storage location first (for Chrome 115+)
        CHROME_MAJOR_VERSION=$(echo $CHROME_VERSION | cut -d. -f1)
        echo "Chrome major version: $CHROME_MAJOR_VERSION"
        
        if [ "$CHROME_MAJOR_VERSION" -ge 115 ]; then
          echo "Using new ChromeDriver storage for Chrome 115+"
          # For Chrome 115+, use the new storage location
          CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_${CHROME_MAJOR_VERSION}")
          echo "ChromeDriver version: $CHROMEDRIVER_VERSION"
          wget -O /tmp/chromedriver.zip "https://storage.googleapis.com/chrome-for-testing-public/${CHROMEDRIVER_VERSION}/linux64/chromedriver-linux64.zip"
        else
          echo "Using legacy ChromeDriver storage for Chrome < 115"
          # For older Chrome versions, use legacy storage
          CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION%.*}")
          echo "ChromeDriver version: $CHROMEDRIVER_VERSION"
          wget -O /tmp/chromedriver.zip "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
        fi
        
        unzip /tmp/chromedriver.zip -d /tmp/
        
        # Handle different directory structures
        if [ -f "/tmp/chromedriver-linux64/chromedriver" ]; then
          sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/
        elif [ -f "/tmp/chromedriver" ]; then
          sudo mv /tmp/chromedriver /usr/local/bin/
        else
          echo "ChromeDriver executable not found in expected locations"
          ls -la /tmp/
          exit 1
        fi
        
        sudo chmod +x /usr/local/bin/chromedriver
        chromedriver --version
        
        # Verify ChromeDriver installation
        if ! chromedriver --version; then
          echo "Manual ChromeDriver installation failed, will rely on webdriver-manager"
        else
          echo "ChromeDriver installed successfully"
        fi
    
    - name: Verify Python environment
      run: |
        python3 --version
        which python3
        python3 -m pip --version
        ls -la requirements.txt
        echo "Contents of requirements.txt:"
        cat requirements.txt
    
    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install -r requirements.txt
        python3 -c "import pytest; print('pytest version:', pytest.__version__)"
        python3 -c "import selenium; print('selenium version:', selenium.__version__)"
        python3 -c "import allure; print('allure imported successfully')"
        python3 -c "import webdriver_manager; print('webdriver-manager imported successfully')"
        python3 -c "import dotenv; print('python-dotenv imported successfully')"
    
    - name: Create necessary directories
      run: |
        mkdir -p screenshots reports allure-results
    
    - name: Run tests
      run: |
        python3 run_tests.py --type smoke --headless
      env:
        HEADLESS: true
    
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ matrix.python-version }}
        path: |
          reports/
          screenshots/
        retention_days: 30
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          allure-results/
        retention_days: 30
